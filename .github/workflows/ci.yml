name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'testing'
        type: choice
        options:
        - testing
        - production-minimal
        - production-lead
        - production-full
      deploy_to_vercel:
        description: 'Deploy to Vercel'
        required: true
        default: true
        type: boolean

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run unit tests
      run: npm run test:run
      
    - name: Run tests with coverage
      run: npm run test:coverage
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
    - name: Build application
      run: npm run build
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Run E2E tests
      run: npm run test:e2e
      
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  deploy-preview:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Vercel Preview
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        scope: ${{ secrets.VERCEL_ORG_ID }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Load environment configuration
      id: load-config
      run: |
        node scripts/load-environment.js testing >> $GITHUB_ENV

    - name: Deploy to Vercel Staging
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_STAGING }}
        vercel-args: '--prod'
        scope: ${{ secrets.VERCEL_ORG_ID }}
      env:
        # Testing database credentials
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL_TEST }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY_TEST }}
        VITE_OPENROUTER_API_KEY: ${{ secrets.VITE_OPENROUTER_API_KEY }}
        VITE_GEMINI_API_KEY: ${{ secrets.VITE_GEMINI_API_KEY }}
        # Feature flags loaded from environment config
        VITE_FEATURE_DASHBOARD: ${{ env.VITE_FEATURE_DASHBOARD }}
        VITE_FEATURE_PATIENTS: ${{ env.VITE_FEATURE_PATIENTS }}
        VITE_FEATURE_SETTINGS: ${{ env.VITE_FEATURE_SETTINGS }}
        VITE_FEATURE_PROFILE: ${{ env.VITE_FEATURE_PROFILE }}
        VITE_FEATURE_LEAD_IN: ${{ env.VITE_FEATURE_LEAD_IN }}
        VITE_FEATURE_APPOINTMENTS: ${{ env.VITE_FEATURE_APPOINTMENTS }}
        VITE_FEATURE_CONSULTATION: ${{ env.VITE_FEATURE_CONSULTATION }}
        VITE_FEATURE_LAB: ${{ env.VITE_FEATURE_LAB }}
        VITE_FEATURE_REPORT_CARDS: ${{ env.VITE_FEATURE_REPORT_CARDS }}
        VITE_FEATURE_MANUFACTURING: ${{ env.VITE_FEATURE_MANUFACTURING }}
        VITE_FEATURE_APPLIANCE_DELIVERY: ${{ env.VITE_FEATURE_APPLIANCE_DELIVERY }}
        VITE_FEATURE_USER_MANAGEMENT: ${{ env.VITE_FEATURE_USER_MANAGEMENT }}
        VITE_FEATURE_PUBLIC_PATIENT_FORM: ${{ env.VITE_FEATURE_PUBLIC_PATIENT_FORM }}
        VITE_FEATURE_PUBLIC_PATIENT_PACKET: ${{ env.VITE_FEATURE_PUBLIC_PATIENT_PACKET }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Load environment configuration
      id: load-config
      run: |
        # Use repository variable to determine production environment
        PROD_ENV="${{ vars.PRODUCTION_ENVIRONMENT || 'production-minimal' }}"
        echo "Using production environment: $PROD_ENV"
        node scripts/load-environment.js $PROD_ENV >> $GITHUB_ENV

    - name: Deploy to Vercel Production
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_PROD }}
        vercel-args: '--prod'
        scope: ${{ secrets.VERCEL_ORG_ID }}
      env:
        # Production database credentials
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL_PROD }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY_PROD }}
        VITE_OPENROUTER_API_KEY: ${{ secrets.VITE_OPENROUTER_API_KEY }}
        VITE_GEMINI_API_KEY: ${{ secrets.VITE_GEMINI_API_KEY }}
        # Feature flags loaded from environment config
        VITE_FEATURE_DASHBOARD: ${{ env.VITE_FEATURE_DASHBOARD }}
        VITE_FEATURE_PATIENTS: ${{ env.VITE_FEATURE_PATIENTS }}
        VITE_FEATURE_SETTINGS: ${{ env.VITE_FEATURE_SETTINGS }}
        VITE_FEATURE_PROFILE: ${{ env.VITE_FEATURE_PROFILE }}
        VITE_FEATURE_LEAD_IN: ${{ env.VITE_FEATURE_LEAD_IN }}
        VITE_FEATURE_APPOINTMENTS: ${{ env.VITE_FEATURE_APPOINTMENTS }}
        VITE_FEATURE_CONSULTATION: ${{ env.VITE_FEATURE_CONSULTATION }}
        VITE_FEATURE_LAB: ${{ env.VITE_FEATURE_LAB }}
        VITE_FEATURE_REPORT_CARDS: ${{ env.VITE_FEATURE_REPORT_CARDS }}
        VITE_FEATURE_MANUFACTURING: ${{ env.VITE_FEATURE_MANUFACTURING }}
        VITE_FEATURE_APPLIANCE_DELIVERY: ${{ env.VITE_FEATURE_APPLIANCE_DELIVERY }}
        VITE_FEATURE_USER_MANAGEMENT: ${{ env.VITE_FEATURE_USER_MANAGEMENT }}
        VITE_FEATURE_PUBLIC_PATIENT_FORM: ${{ env.VITE_FEATURE_PUBLIC_PATIENT_FORM }}
        VITE_FEATURE_PUBLIC_PATIENT_PACKET: ${{ env.VITE_FEATURE_PUBLIC_PATIENT_PACKET }}

  deploy-manual:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_to_vercel == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Load environment configuration
      id: load-config
      run: |
        ENV="${{ github.event.inputs.environment }}"
        echo "Using environment: $ENV"
        node scripts/load-environment.js $ENV >> $GITHUB_ENV

    - name: Determine Vercel Project
      id: vercel-project
      run: |
        ENV="${{ github.event.inputs.environment }}"
        if [[ "$ENV" == "testing" ]]; then
          echo "project_id=${{ secrets.VERCEL_PROJECT_ID_STAGING }}" >> $GITHUB_OUTPUT
          echo "db_url=${{ secrets.VITE_SUPABASE_URL_TEST }}" >> $GITHUB_OUTPUT
          echo "db_key=${{ secrets.VITE_SUPABASE_ANON_KEY_TEST }}" >> $GITHUB_OUTPUT
        else
          echo "project_id=${{ secrets.VERCEL_PROJECT_ID_PROD }}" >> $GITHUB_OUTPUT
          echo "db_url=${{ secrets.VITE_SUPABASE_URL_PROD }}" >> $GITHUB_OUTPUT
          echo "db_key=${{ secrets.VITE_SUPABASE_ANON_KEY_PROD }}" >> $GITHUB_OUTPUT
        fi

    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ steps.vercel-project.outputs.project_id }}
        vercel-args: '--prod'
        scope: ${{ secrets.VERCEL_ORG_ID }}
      env:
        # Database credentials based on environment
        VITE_SUPABASE_URL: ${{ steps.vercel-project.outputs.db_url }}
        VITE_SUPABASE_ANON_KEY: ${{ steps.vercel-project.outputs.db_key }}
        VITE_OPENROUTER_API_KEY: ${{ secrets.VITE_OPENROUTER_API_KEY }}
        VITE_GEMINI_API_KEY: ${{ secrets.VITE_GEMINI_API_KEY }}
        # Feature flags loaded from environment config
        VITE_FEATURE_DASHBOARD: ${{ env.VITE_FEATURE_DASHBOARD }}
        VITE_FEATURE_PATIENTS: ${{ env.VITE_FEATURE_PATIENTS }}
        VITE_FEATURE_SETTINGS: ${{ env.VITE_FEATURE_SETTINGS }}
        VITE_FEATURE_PROFILE: ${{ env.VITE_FEATURE_PROFILE }}
        VITE_FEATURE_LEAD_IN: ${{ env.VITE_FEATURE_LEAD_IN }}
        VITE_FEATURE_APPOINTMENTS: ${{ env.VITE_FEATURE_APPOINTMENTS }}
        VITE_FEATURE_CONSULTATION: ${{ env.VITE_FEATURE_CONSULTATION }}
        VITE_FEATURE_LAB: ${{ env.VITE_FEATURE_LAB }}
        VITE_FEATURE_REPORT_CARDS: ${{ env.VITE_FEATURE_REPORT_CARDS }}
        VITE_FEATURE_MANUFACTURING: ${{ env.VITE_FEATURE_MANUFACTURING }}
        VITE_FEATURE_APPLIANCE_DELIVERY: ${{ env.VITE_FEATURE_APPLIANCE_DELIVERY }}
        VITE_FEATURE_USER_MANAGEMENT: ${{ env.VITE_FEATURE_USER_MANAGEMENT }}
        VITE_FEATURE_PUBLIC_PATIENT_FORM: ${{ env.VITE_FEATURE_PUBLIC_PATIENT_FORM }}
        VITE_FEATURE_PUBLIC_PATIENT_PACKET: ${{ env.VITE_FEATURE_PUBLIC_PATIENT_PACKET }}

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: npm audit --audit-level moderate
      
    - name: Run dependency check
      uses: actions/dependency-review-action@v3
      if: github.event_name == 'pull_request'
